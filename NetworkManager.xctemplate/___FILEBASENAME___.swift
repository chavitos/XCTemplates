//
//  ___FILENAME___
//  ___PROJECTNAME___
//
//  Created by ___FULLUSERNAME___ on ___DATE___.
//  Copyright (c) ___YEAR___ ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by Toledo's Swift Xcode Templates
//

import Foundation
import Alamofire

public enum ___PROJECTNAME___Requests: URLRequestConvertible {

    static let baseURLPath              = ""
    static let baseURI                  = ""
    static let completeURL              = "\(___PROJECTNAME___Requests.baseURLPath)\(___PROJECTNAME___Requests.baseURI)"

    case <#request#>
    
    var method: HTTPMethod {
        switch self {
        case <#request#>:
            return <#httpMethod#>
        }
    }
    
    var baseURL: String{
        switch self{
        case <#request#>:
            return ___PROJECTNAME___Requests.completeURL
        }
    }
    
    var path: String {
        switch self {
        case <#request#>:
            return ""
        }
    }
    
    var parameters: [String: Any]? {
        switch self {
        case <#request#>:
            return nil
        }
    }
    
    var headers:HTTPHeaders {
        switch self {
        case <#request#>:
            return ["Content-Type":"application/x-www-form-urlencoded"]
        }
    }
    
    var isJsonEnconding:Bool{
        switch self {
        case  <#request#>:
            return true
        default:
            return false
        }
    }
    
    public func asURLRequest() throws -> URLRequest {
        
        let url = try baseURL.asURL()
        var request = URLRequest(url: url.appendingPathComponent(path))
        
        request.httpMethod = method.rawValue
        
        for header in headers {
            request.setValue(header.value, forHTTPHeaderField: header.key)
        }
        
        request.timeoutInterval = TimeInterval(10 * 1000)
        
        if isJsonEnconding{
            return try JSONEncoding.default.encode(request, with: parameters)
        }
        
        return try URLEncoding.default.encode(request, with: parameters)
    }
}

class NetworkManager {
    
    func request(withURL url:URLRequestConvertible, callback:@escaping (Data?,DataResponse<Any>?,Error?)->Void) {
        
        Alamofire.request(url).validate().responseJSON { response in
            
            NSLog("Requesting: \(url.urlRequest!)")
            
            switch response.result {
            case .success:
                let data = response.data
                NSLog("Request successed!")
                callback(data,response, nil)
            case .failure(let error):
                NSLog("Request failed! \(error.localizedDescription)")
                callback(nil,response, error)
            }
        }
    }
}
